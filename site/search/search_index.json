{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Kenya School of Artificial Intelligence <p>         Welcome to       </p>          Kenya School ofArtificial Intelligence <p>         You\u2019re not just here to learn \u2014 you're here to build, lead, and ship Africa\u2019s next generation of AI.       </p>             Get Started Free          <p>Empowering AI excellence from Africa to the world.</p>        Why We Exist      <p>       Africa has the talent. Africa has the data.        Now it needs the courage to build \u2014 and the discipline to lead.                 KSAI is not a classroom. It is a builder\u2019s lab \u2014 a place where young minds learn not to follow, but to         execute and lead with excellence.        </p>        What Makes KSAI Different      Built for Africa <p>           Real-world problems. Local-first data. Human-centered design.         </p> Engineer-First <p>           No grades. No lectures. Only code, collaboration, and shipping real projects.         </p> Startup Mindset <p>           Think like a founder. Build like a product team. Launch like a startup.         </p>        Your Mission Starts Now      <p>       Begin with Module 0: Foundations of Applied AI Engineering       This is your environment, mindset, and method \u2014 the foundations of all great engineering.     </p>        Start Building \u2192             Join the KSAI Community      <p>       Don\u2019t learn in isolation. Become part of a growing tribe of AI engineers across Africa.       Build together. Share breakthroughs.     </p>          WhatsApp                 Telegram                 Facebook               Meet Your Instructor      <p> Alex Mwirigi \u2014 Founder @ KSAI | AI Engineer              I\u2019m building Africa\u2019s first AI-powered digital hospital and leading the next generation of engineers through the Kenya School of Artificial Intelligence.              My expertise spans Machine Learning, Deep Learning, MLOps, and product-focused startup execution. I don\u2019t teach theory  I deliver real, production-ready solutions to African challenges.     </p> <p> Phone: +254 111 475 368 \u00a0 | \u00a0         Email: mwirigialex@351@gmail.com </p>          Connect on LinkedIn \u2192               Hire Me or Say Hello      <p> Call: +254 111 475 368 Email: mwirigialex@351@gmail.com </p>         View LinkedIn Profile             Support the Mission      <p>       If this vision inspires you, help us push further. Buy me a coffee and be part of the movement.     </p>        \u2615 Call: +254 111 475 368      <p>     \u00a9 2025 Kenya School of Artificial Intelligence. All rights reserved.   </p> <p>     Built with vision, discipline, and purpose \u2014 in \ud83c\uddf0\ud83c\uddea Kenya for Africa.   </p> <p>     Crafted by Alex Mwirigi \u00b7 Founder &amp; AI Engineer   </p>"},{"location":"module0/lesson0.1_workshop/","title":"Module 0: Foundations of Applied AI Engineering","text":""},{"location":"module0/lesson0.1_workshop/#lesson-01-the-engineering-workshop","title":"Lesson 0.1: The Engineering Workshop","text":""},{"location":"module0/lesson0.1_workshop/#welcome-to-the-team","title":"Welcome to the team.","text":"<p>Before we write a single line of artificial intelligence code, before we build a model or analyze data, we must first enter our workshop.</p> <p>A master carpenter cannot build a sturdy table without first mastering her workshop. She needs to know where every tool is, how to use it, and how to keep her workbench clean and organized. An auto mechanic can't tune an engine if he's fumbling to find the right wrench.</p> <p>Our workshop is the computer, but not the one you might be used to with icons and a mouse. Our professional workshop is the server. And the way we interact with this server, our set of professional tools, is the Command Line Interface (CLI).</p> <p>Key Term: The Command Line Interface (CLI)</p> <p>The CLI is a text-based interface used for running programs, managing computer files, and interacting with the operating system. It is the direct line of communication to the machine's core.</p> <p>Think of the graphical interface (windows, icons, your mouse) as a friendly, pre-packaged toolkit for everyday tasks. It's safe and easy. The command line, however, is the master's toolkit. It gives you direct, powerful, and precise control over the machine. It is faster, more versatile, and essential for automating tasks\u2014a key skill for any engineer.</p> <p>Your first day on the job isn't about building the final product. It's about getting your keys to the workshop and learning where the tools are.</p> <p>So, let's start with a foundational question. Forget computers for a moment.</p> Why is it more efficient for a master chef to shout '2-minute egg, sunny-side up!' to their line cook, rather than filling out a detailed paper form with checkboxes for every option? <p>You, the engineer, are the chef. The computer's operating system is your highly-trained line cook. The command line is the language you use to give orders.</p> <p>Filling out a form is like using your mouse to click through menus and windows. It's fine for one-off tasks, but imagine trying to serve 100 customers that way. You'd be hopelessly slow. Shouting clear, concise commands is the only way to operate at scale. This is why the command line is the professional's environment.</p> <pre><code>graph LR\n    subgraph \"The Professional's Workflow (High Speed, High Scale)\"\n        A(&lt;b&gt;Master Chef&lt;/b&gt;&lt;br/&gt;The Engineer) -- Shouts Command --&gt; B(&lt;b&gt;Concise Language&lt;/b&gt;&lt;br/&gt;The Command Line);\n        B -- Interpreted by --&gt; C(&lt;b&gt;Line Cook&lt;/b&gt;&lt;br/&gt;The Operating System);\n        C -- Produces --&gt; D(&lt;b&gt;Perfect Dish&lt;/b&gt;&lt;br/&gt;Precise Action);\n    end\n\n    subgraph \"The Amateur's Workflow (Low Speed, Low Scale)\"\n        X(Home Cook&lt;br/&gt;The Casual User) -- Fills out Form --&gt; Y(Detailed Recipe Card&lt;br/&gt;Graphical Interface);\n        Y -- Followed by --&gt; C;\n    end\n\n    style A fill:#4CAF50,stroke:#333,stroke-width:2px,color:#fff\n    style B fill:#2196F3,stroke:#333,stroke-width:2px,color:#fff\n    style D fill:#4CAF50,stroke:#333,stroke-width:2px,color:#fff</code></pre> <p>Our workshop is a Linux server. Linux is the dominant operating system for the servers that power the internet, from Google to Netflix to the smallest startups. Mastering its language is non-negotiable. The program you use to type these commands is called the terminal or shell.</p> <p>Let's learn our first three commands. They are the most fundamental. They answer three simple questions:</p> Question Command Analogy Where am I? <code>pwd</code> Checking your GPS coordinates. What is around me? <code>ls</code> Turning on the lights to see inside the room. How do I move? <code>cd</code> Walking through a door to another room."},{"location":"module0/lesson0.1_workshop/#concept-1-where-am-i-pwd","title":"Concept 1: Where am I? (<code>pwd</code>)","text":"<p>When you first walk into the workshop, you need to know where you are standing. In a graphical system, you might look at the top of a window to see the folder path, like <code>C:\\Users\\John\\Documents</code>.</p> <p>In the command line, we have a direct command for this. It is <code>pwd</code>. <code>pwd</code> stands for Print Working Directory. A \"directory\" is simply the professional's word for a folder. The \"working directory\" is the folder you are currently inside.</p> <p>Think of it as your GPS. It tells you your exact coordinates inside the computer's file system.</p> <p>So, if you just logged into a server and the screen is blank except for a blinking cursor, what is the very first command you should type to orient yourself?</p> Terminal: Checking Your Location<pre><code>$ pwd\n/home/founding_engineer\n</code></pre>"},{"location":"module0/lesson0.1_workshop/#concept-2-what-is-around-me-ls","title":"Concept 2: What is around me? (<code>ls</code>)","text":"<p>Now you know where you are. The next logical question is, \"What's in this folder?\" or \"What's in this directory?\" The command for this is <code>ls</code>. <code>ls</code> is short for list. It lists the contents (the files and sub-directories) of your current working directory.</p> <p>Imagine you are standing in a room (<code>pwd</code> told you which room). Typing <code>ls</code> is like turning on the lights to see all the furniture and doors in that room.</p> <p>Now, a slightly more advanced question. What if you wanted to know more than just the names of the files? What if you wanted to see details, like who owns the file, how big it is, and when it was last modified?</p> <p>This is a common need. The command line handles this with options or flags. An option modifies the behavior of a command. They usually start with a hyphen (<code>-</code>). For <code>ls</code>, a very common option is <code>-l</code> (for \"long\" format). So, you would type: <code>ls -l</code>. This gives you a detailed, long-form list.</p> <p>What do you predict would be the difference in output between typing <code>ls</code> and typing <code>ls -l</code>?</p> Simple List (<code>ls</code>)Detailed List (<code>ls -l</code>) <pre><code>$ ls\nDesktop  Documents  Downloads  Music  Pictures  Projects  Videos\n</code></pre> <pre><code>$ ls -l\ntotal 28\ndrwxr-xr-x 2 user user 4096 Sep 15 10:00 Desktop\ndrwxr-xr-x 2 user user 4096 Sep 15 10:00 Documents\ndrwxr-xr-x 2 user user 4096 Sep 15 10:00 Downloads\ndrwxr-xr-x 2 user user 4096 Sep 15 10:00 Music\ndrwxr-xr-x 2 user user 4096 Sep 15 10:00 Pictures\ndrwxr-xr-x 3 user user 4096 Sep 15 10:05 Projects\ndrwxr-xr-x 2 user user 4096 Sep 15 10:00 Videos\n</code></pre>"},{"location":"module0/lesson0.1_workshop/#concept-3-how-do-i-move-cd","title":"Concept 3: How do I move? (<code>cd</code>)","text":"<p>You know where you are (<code>pwd</code>), and you see what's around you (<code>ls</code>). You see a door to another room, a subdirectory that you want to enter. The command to move between directories is <code>cd</code>. <code>cd</code> stands for change directory.</p> <p>If <code>ls</code> shows you a directory named <code>projects</code>, you would type the following to enter it: <code>cd projects</code>. Your \"location\" in the terminal would now be inside the <code>projects</code> directory.</p> <p>Now, here's a crucial test of understanding. After you run <code>cd projects</code>, your cursor will just blink on a new line. The screen doesn't automatically tell you that you've moved.</p> <p>What two commands would you use, and in what order, to first confirm that you have successfully moved into the <code>projects</code> directory, and then to see what's inside it?</p> <p>The Engineer's Workflow: Act, Verify, Inspect</p> <p>This sequence\u2014Act, Verify, then Inspect\u2014is a fundamental pattern in engineering. You don't assume your command worked. You check. It saves you from countless mistakes.</p> <ol> <li>Act: <code>cd projects</code> - You issue the command to move.</li> <li>Verify: <code>pwd</code> - You ask, \"Did I actually move? Where am I now?\" The system should reply with <code>/home/your_username/projects</code>.</li> <li>Inspect: <code>ls</code> - Now that you've confirmed your new location, you ask, \"Okay, what's in here?\"</li> </ol>"},{"location":"module0/lesson0.1_workshop/#the-full-toolkit-creating-and-manipulating","title":"The Full Toolkit: Creating and Manipulating","text":"<p>So far, we've only been looking around. But a workshop is for building. Let's learn the tools for creating and changing things.</p> Command Action Description <code>mkdir [name]</code> Make Directory Creates a new, empty directory. <code>touch [name]</code> Create Empty File The simplest way to create a new file. <code>mv [src] [dest]</code> Move / Rename Moves a file to a new directory, or renames it if <code>dest</code> is a new filename. <code>cp [src] [dest]</code> Copy Copies a file or directory, leaving the original in place. <code>cat [file]</code> View Contents Displays the entire contents of a file on the screen. <code>rm [file]</code> Remove File Deletes a file. <code>chmod [mode] [file]</code> Change Permissions Changes the read/write/execute permissions. <p>CRITICAL WARNING: The <code>rm</code> Command is Permanent</p> <p>A CRITICAL WARNING: The <code>rm</code> command is permanent. There is no \"Recycle Bin\" or \"Trash Can\" on the command line. Once you <code>rm</code> a file, it is gone forever. This is a powerful and dangerous tool. Always double-check what you are doing before using <code>rm</code>.</p>"},{"location":"module0/lesson0.1_workshop/#command-line-basics-your-guide-to-the-digital-filing-cabinet","title":"Command Line Basics: Your Guide to The Digital Filing Cabinet","text":"<p>Let's demystify the command line. The best way to start is to think of your computer's storage as a giant filing cabinet.</p> <ul> <li>Directories are the big drawers. You create them to stay organized.</li> <li>Files are the paper documents you put inside those drawers.</li> </ul> <p>Our job today is to learn the five basic commands to manage this cabinet. Let's begin.</p>"},{"location":"module0/lesson0.1_workshop/#step-1-creating-a-drawer-mkdir","title":"Step 1: Creating a Drawer (<code>mkdir</code>)","text":"<p>Before we can put any files away, we need a drawer to put them in. In the command line world, a drawer or a folder is called a directory. The command to Make a Directory is <code>mkdir</code>.</p> <p>The Formula: <code>mkdir [name_of_directory]</code></p>"},{"location":"module0/lesson0.1_workshop/#lets-do-it-together","title":"Let's Do It Together:","text":"<ol> <li> <p>First, let's see what's on our \"desktop\" right now. Use the <code>ls</code> (list) command.     <pre><code>ls\n</code></pre> (You'll see your current files and folders.)</p> </li> <li> <p>Now, let's make our very first project directory. We'll call it <code>science-project</code>. Type this exactly and press Enter:     <pre><code>mkdir science-project\n</code></pre>     It looks like nothing happened, right? The command line only talks back when there's an error or when you ask it to. So, how do we check our work? We use <code>ls</code> again!     <pre><code>ls\n</code></pre> Success! You should now see <code>science-project</code> listed among your other items. You've just created your first digital drawer.</p> </li> </ol>"},{"location":"module0/lesson0.1_workshop/#step-2-creating-a-blank-document-touch","title":"Step 2: Creating a Blank Document (<code>touch</code>)","text":"<p>Okay, we have our <code>science-project</code> drawer. Now we need to put a blank piece of paper in it to start taking notes. The <code>touch</code> command creates a new, completely empty file. It's like \"touching\" a piece of paper into existence.</p> <p>The Formula: <code>touch [name_of_file]</code></p>"},{"location":"module0/lesson0.1_workshop/#lets-do-it-together_1","title":"Let's Do It Together:","text":"<ol> <li> <p>Right now, we are standing outside our <code>science-project</code> drawer. To put a file inside it, we first have to \"open the drawer.\" We do this by changing our location into the directory with the <code>cd</code> command.     <pre><code>cd science-project\n</code></pre> (Your command prompt might change to show you are now inside <code>science-project</code>.)</p> </li> <li> <p>Now that we're inside, let's create a file for our hypothesis.     <pre><code>touch hypothesis.txt\n</code></pre></p> </li> <li> <p>Let's check our work. Use <code>ls</code> to see what's inside this new directory.     <pre><code>ls\n</code></pre> Perfect! You will see <code>hypothesis.txt</code> listed. You've just placed your first file in a directory.</p> </li> </ol>"},{"location":"module0/lesson0.1_workshop/#step-3-peeking-inside-a-document-cat","title":"Step 3: Peeking Inside a Document (<code>cat</code>)","text":"<p>An empty file is a good start, but what if we want to quickly see what's written inside without opening a full text editor? The <code>cat</code> command displays the entire contents of a file right on your screen.</p> <p>The Formula: <code>cat [name_of_file]</code></p>"},{"location":"module0/lesson0.1_workshop/#lets-do-it-together_2","title":"Let's Do It Together:","text":"<ol> <li> <p>First, our <code>hypothesis.txt</code> file is empty. That's boring. Let's use a little trick to put some text in it. Just type this command (we'll learn why it works later):     <pre><code>echo \"If I learn the command line, I will be more efficient.\" &gt; hypothesis.txt\n</code></pre></p> </li> <li> <p>Now, let's use <code>cat</code> to read the file.     <pre><code>cat hypothesis.txt\n</code></pre>     Look at that! The terminal will print the contents of the file right below your command:     <pre><code>If I learn the command line, I will be more efficient.\n</code></pre>     This is incredibly useful for quickly checking files.</p> </li> </ol>"},{"location":"module0/lesson0.1_workshop/#step-4-moving-and-renaming-mv","title":"Step 4: Moving and Renaming (<code>mv</code>)","text":"<p>Organization is key. Sometimes you name a file poorly, or you need to move a file from one drawer to another. The <code>mv</code> (move) command does both!</p> <p>The Formula: <code>mv [what_to_move] [where_to_put_it]</code></p>"},{"location":"module0/lesson0.1_workshop/#lets-do-it-together-part-a-renaming","title":"Let's Do It Together (Part A: Renaming):","text":"<p>\"hypothesis.txt\" is a bit long. Let's rename it to <code>plan.txt</code>. Since we are moving it from an old name to a new name in the same location, it just renames the file.</p> <p><pre><code>mv hypothesis.txt plan.txt\n</code></pre> Check your work with <code>ls</code>. You'll see <code>hypothesis.txt</code> is gone, and <code>plan.txt</code> is now there.</p>"},{"location":"module0/lesson0.1_workshop/#lets-do-it-together-part-b-moving","title":"Let's Do It Together (Part B: Moving):","text":"<p>Let's get even more organized. We'll create a <code>docs</code> folder and move our <code>plan.txt</code> into it.</p> <ol> <li> <p>First, create a new directory for our documents.     <pre><code>mkdir docs\n</code></pre></p> </li> <li> <p>Now, use <code>mv</code> to move the file <code>plan.txt</code> into the <code>docs</code> directory.     <pre><code>mv plan.txt docs\n</code></pre> Check with <code>ls</code>. The <code>plan.txt</code> file is gone from here. Where did it go? Let's look inside the <code>docs</code> directory: <code>ls docs</code>. There it is!</p> </li> </ol>"},{"location":"module0/lesson0.1_workshop/#step-5-the-shredder-rm","title":"Step 5: The Shredder (<code>rm</code>)","text":"<p>ATTENTION! This is the most important command to be careful with. <code>rm</code> means ReMove. It deletes files.</p> <p>WARNING: This is NOT like moving a file to the Trash or Recycle Bin. When you use <code>rm</code>, the file is PERMANENTLY GONE. There is no undo button. Think of it as a paper shredder. Always pause and think before you press Enter on an <code>rm</code> command.</p> <p>The Formula: <code>rm [name_of_file_to_delete]</code></p>"},{"location":"module0/lesson0.1_workshop/#lets-do-it-together-safely","title":"Let's Do It Together (Safely):","text":"<ol> <li>Let's create a junk file that we don't mind deleting.     <pre><code>touch junk-file.tmp\n</code></pre></li> <li>Use <code>ls</code> to confirm <code>junk-file.tmp</code> is there.</li> <li>Now, let's carefully delete it.     <pre><code>rm junk-file.tmp\n</code></pre></li> <li>Use <code>ls</code> again. It's gone forever.</li> </ol>"},{"location":"module0/lesson0.1_workshop/#what-about-deleting-a-directory","title":"What about deleting a directory?","text":"<p>If you try <code>rm docs</code>, it will give you an error. This is a safety feature! To delete a directory and EVERYTHING inside it, you must use the <code>-r</code> (recursive) flag.</p> <pre><code># THIS IS A DANGEROUS COMMAND!\n# It will delete the 'docs' folder and 'plan.txt' inside it.\nrm -r docs\n</code></pre>"},{"location":"module0/lesson0.1_workshop/#lesson-summary-homework","title":"Lesson Summary &amp; Homework","text":"<p>Excellent work today! You've just learned a complete workflow for managing files.</p> <ul> <li><code>mkdir</code>: Creates directories (drawers).</li> <li><code>touch</code>: Creates empty files (paper).</li> <li><code>cat</code>: Reads a file's contents.</li> <li><code>mv</code>: Renames or moves files/directories.</li> <li><code>rm</code>: Permanently deletes files.</li> </ul>"},{"location":"module0/lesson0.1_workshop/#your-homework","title":"Your Homework:","text":"<p>Practice is how this becomes second nature. Your assignment is to:</p> <ol> <li>Go back to your home directory (<code>cd ..</code>).</li> <li>Create a new directory called <code>my-homework</code>.</li> <li>Go inside <code>my-homework</code>.</li> <li>Create two directories inside it: <code>math</code> and <code>history</code>.</li> <li>Create a file named <code>algebra.txt</code> inside the <code>math</code> directory.</li> <li>Create a file named <code>notes.txt</code> inside the <code>history</code> directory.</li> <li>Rename the <code>notes.txt</code> file to <code>ww2-notes.txt</code>.</li> <li>When you're all done, clean up by deleting the entire <code>my-homework</code> directory and everything in it. (Remember the special flag for deleting directories!)</li> </ol>"},{"location":"module0/lesson0.1_workshop/#hands-on-exercise-the-scavenger-hunt","title":"Hands-On Exercise: The Scavenger Hunt","text":"<p>Now we apply this to your first exercise, the \"Scavenger hunt on a Linux server.\" The goal is to navigate the file system to find specific information. This simulates a real-world task where a senior engineer might say, \"Hey, go find the error log for the web server; I think it's somewhere in the <code>/var/log</code> directory.\"</p> <p>Your Mission Briefing</p> <p>I am a senior engineer. Here is your task:</p> <p>\"I've hidden a 'secret message' for you on the server. I believe it's in a file named <code>secret_message.txt</code>. I don't remember exactly where I put it, but I think it's in a directory named <code>deeply_hidden_folder</code>. That folder itself is probably located in a subdirectory called <code>level3</code>, which is inside <code>level2</code>, which is inside <code>level1</code>. The <code>level1</code> directory is in your home directory.\"</p> <p>We know <code>pwd</code>, <code>ls</code>, and <code>cd</code>. You're missing one tool: how to read the contents of a file. The command for that is <code>cat</code>. To read <code>secret_message.txt</code>, you would type: <code>cat secret_message.txt</code></p> Your TaskThe Solution (Click to Reveal) <p>Based on my instructions and the tools you now have (<code>pwd</code>, <code>ls</code>, <code>cd</code>, <code>cat</code>), walk me through the exact sequence of commands you would type, step-by-step, to find and read the secret message. Start from the moment you log in to your home directory.</p> <p>Think through the \"Act, Verify, Inspect\" pattern before revealing the solution.</p> Solution Walkthrough<pre><code># Step 1: Verify your starting point. Always know where you are.\npwd\n\n# Step 2: Inspect your surroundings. You should see 'level1'.\nls\n\n# Step 3: Act. Move directly to the target directory.\n# Pro-tip: Use the Tab key to auto-complete each part of this path!\ncd level1/level2/level3/deeply_hidden_folder/\n\n# Step 4: Verify the move.\npwd\n\n# Step 5: Inspect the new location. Is the file here?\nls\n\n# Step 6: Act. You've found the file. Read its contents.\ncat secret_message.txt\n</code></pre> <p></p> <p>Ready to learn how we manage our code's source of truth?</p> <p>Proceed to Lesson 0.2: Designing Technical Architecture</p>"},{"location":"module0/lesson0.2_blueprint/","title":"Module 0: Foundations of Applied AI Engineering","text":""},{"location":"module0/lesson0.2_blueprint/#lesson-02-designing-technical-architecture","title":"Lesson 0.2: Designing Technical Architecture","text":"<p>The \"Why\": A model without metrics is an opinion.</p>"},{"location":"module0/lesson0.2_blueprint/#key-concepts-tools","title":"Key Concepts &amp; Tools","text":"<ul> <li>Statistics:<ul> <li>Mean, median, variance</li> <li>Distributions</li> <li>Hypothesis testing</li> <li>Correlation vs. causation</li> </ul> </li> <li>Python Libraries:<ul> <li><code>pandas.DataFrame.describe()</code></li> <li><code>matplotlib</code>/<code>seaborn</code> for plotting</li> </ul> </li> </ul>"},{"location":"module0/lesson0.2_blueprint/#hands-on-exercise-github-commit","title":"Hands-On Exercise (GitHub Commit)","text":"<p>Task: Create a script <code>eda.py</code> or a notebook <code>00-exploratory-data-analysis.ipynb</code>.</p> <ol> <li>Load your dataset into a pandas DataFrame.</li> <li>Compute descriptive statistics using <code>.describe()</code>.</li> <li>Generate and save visualizations:<ul> <li>Histograms for key numerical features.</li> <li>Box plots for categorical vs. numerical data.</li> <li>A correlation heatmap.</li> </ul> </li> <li>Add a markdown summary of your initial findings.</li> </ol> <p>Instructor Notes &amp; Pitfalls</p> <p>Pitfall: Students will be tempted to skip deep EDA to get to the \"fun\" modeling part.</p> <p>Guidance: Emphasize that EDA is the most critical step. It prevents the \"garbage-in, garbage-out\" problem. Ask them: \"What's the most surprising thing you found in the data? How might that affect the model you build?\"</p> <p>Our Git branching flow follows this pattern:</p> <pre><code>graph TD\n    A[main] --&gt; B{Create feature branch}\n    B --&gt; C[git checkout -b feature/new-login]\n    C --&gt; D[Make commits...]\n    D --&gt; E{Open Pull Request}\n    E --&gt; F[Code Review &amp; Approval]\n    F --&gt; G[Merge to main]\n    G --&gt; A</code></pre>"}]}